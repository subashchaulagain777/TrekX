// import 'package:flutter/material.dart';
// import 'package:provider/provider.dart';
// import 'dart:math';
// import 'package:shimmer/shimmer.dart';
//
// // Add these to your pubspec.yaml and run `flutter pub get`:
// // dependencies:
// //   flutter:
// //     sdk: flutter
// //   provider: ^6.0.0
// //   firebase_core: ^2.24.2
// //   firebase_auth: ^4.16.0
// //   cloud_firestore: ^4.15.8
// //   shimmer: ^3.0.0
//
// import 'package:firebase_core/firebase_core.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
//
// import 'firebase_options.dart';
// // You need a firebase_options.dart file generated by the FlutterFire CLI
// // import 'firebase_options.dart';
//
//
// // --- MAIN: App Setup ---
// Future<void> main() async {
//   WidgetsFlutterBinding.ensureInitialized();
//   // Ensure you have run `flutterfire configure` and this file exists.
//   // Then, uncomment the following lines.
//   await Firebase.initializeApp(
//     options: DefaultFirebaseOptions.currentPlatform,
//   );
//   runApp(const EasyTrekApp());
// }
//
// class EasyTrekApp extends StatelessWidget {
//   const EasyTrekApp({super.key});
//
//   @override
//   Widget build(BuildContext context) {
//     return MultiProvider(
//       providers: [
//         ChangeNotifierProvider(create: (_) => AuthProvider()),
//         Provider(create: (_) => TrekkingPackageProvider()),
//         Provider(create: (_) => MarketplaceProvider()),
//         Provider(create: (_) => GuidesProvider()),
//         ChangeNotifierProvider(create: (_) => SocialProvider()),
//         ChangeNotifierProvider(create: (_) => ChatProvider()),
//         Provider(create: (_) => UserProvider()),
//       ],
//       child: MaterialApp(
//         title: 'EasyTrek',
//         theme: ThemeData(
//           primarySwatch: Colors.green,
//           primaryColor: const Color(0xFF4CAF50),
//           colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.green)
//               .copyWith(secondary: const Color(0xFF03A9F4), surface: const Color(0xFFF5F5F5)),
//           scaffoldBackgroundColor: Colors.white,
//           textTheme: const TextTheme(
//             headlineSmall: TextStyle(fontSize: 24.0, fontWeight: FontWeight.bold, color: Color(0xFF333333)),
//             titleLarge: TextStyle(fontSize: 20.0, fontWeight: FontWeight.bold, color: Color(0xFF333333)),
//             titleMedium: TextStyle(fontSize: 16.0, fontWeight: FontWeight.w600, color: Color(0xFF444444)),
//             bodyLarge: TextStyle(fontSize: 16.0, color: Color(0xFF666666)),
//             bodyMedium: TextStyle(fontSize: 14.0, color: Color(0xFF999999)),
//           ),
//           elevatedButtonTheme: ElevatedButtonThemeData(
//             style: ElevatedButton.styleFrom(
//               backgroundColor: const Color(0xFF4CAF50),
//               foregroundColor: Colors.white,
//               shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30.0)),
//               padding: const EdgeInsets.symmetric(horizontal: 30.0, vertical: 15.0),
//             ),
//           ),
//         ),
//         home: const AuthWrapper(),
//       ),
//     );
//   }
// }
//
//
// // --- PROVIDERS: State Management ---
//
// class AuthProvider with ChangeNotifier {
//   final FirebaseAuth _auth = FirebaseAuth.instance;
//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;
//   UserModel? _userModel;
//
//   User? get user => _auth.currentUser;
//   UserModel? get userModel => _userModel;
//
//   Stream<User?> get authStateChanges => _auth.authStateChanges();
//
//   AuthProvider() {
//     _auth.authStateChanges().listen(_onAuthStateChanged);
//   }
//
//   Future<void> _onAuthStateChanged(User? user) async {
//     if (user == null) {
//       _userModel = null;
//     } else {
//       _firestore.collection('users').doc(user.uid).snapshots().listen((snapshot) {
//         if (snapshot.exists) {
//           _userModel = UserModel.fromFirestore(snapshot);
//           notifyListeners();
//         } else {
//           _fetchUserModel(user);
//         }
//       });
//     }
//     notifyListeners();
//   }
//
//   Future<void> _fetchUserModel(User user) async {
//     try {
//       final docRef = _firestore.collection('users').doc(user.uid);
//       final docSnapshot = await docRef.get();
//       if (docSnapshot.exists) {
//         _userModel = UserModel.fromFirestore(docSnapshot);
//       } else {
//         final defaultUserModel = UserModel(
//           uid: user.uid,
//           email: user.email ?? 'no-email@example.com',
//           fullName: 'New User',
//           role: 'trekker',
//           connections: [],
//           sentRequests: [],
//           receivedRequests: [],
//         );
//         await docRef.set(defaultUserModel.toFirestore());
//         _userModel = defaultUserModel;
//       }
//     } catch (e) {
//       print("Error fetching user model: $e");
//       _userModel = null;
//     }
//   }
//
//
//   Future<String?> login(String email, String password) async {
//     try {
//       await _auth.signInWithEmailAndPassword(email: email, password: password);
//       return null;
//     } on FirebaseAuthException catch (e) {
//       return e.message;
//     }
//   }
//
//   Future<String?> signup({required String email, required String password, required String fullName, required String role}) async {
//     try {
//       UserCredential userCredential = await _auth.createUserWithEmailAndPassword(email: email, password: password);
//
//       if(userCredential.user != null) {
//         UserModel newUser = UserModel(
//           uid: userCredential.user!.uid,
//           email: email,
//           fullName: fullName,
//           role: role,
//           connections: [],
//           sentRequests: [],
//           receivedRequests: [],
//         );
//         await _firestore.collection('users').doc(userCredential.user!.uid).set(newUser.toFirestore());
//         _userModel = newUser;
//       }
//       return null;
//     } on FirebaseAuthException catch (e) {
//       return e.message;
//     }
//   }
//
//   Future<void> sendConnectionRequest(String recipientId) async {
//     final currentUserId = user?.uid;
//     if (currentUserId == null) return;
//
//     await _firestore.collection('users').doc(currentUserId).update({
//       'sentRequests': FieldValue.arrayUnion([recipientId])
//     });
//     await _firestore.collection('users').doc(recipientId).update({
//       'receivedRequests': FieldValue.arrayUnion([currentUserId])
//     });
//   }
//
//   Future<void> acceptConnectionRequest(String senderId) async {
//     final currentUserId = user?.uid;
//     if (currentUserId == null) return;
//
//     WriteBatch batch = _firestore.batch();
//
//     batch.update(_firestore.collection('users').doc(currentUserId), {'connections': FieldValue.arrayUnion([senderId])});
//     batch.update(_firestore.collection('users').doc(senderId), {'connections': FieldValue.arrayUnion([currentUserId])});
//
//     batch.update(_firestore.collection('users').doc(currentUserId), {'receivedRequests': FieldValue.arrayRemove([senderId])});
//     batch.update(_firestore.collection('users').doc(senderId), {'sentRequests': FieldValue.arrayRemove([currentUserId])});
//
//     await batch.commit();
//   }
//
//   Future<void> declineConnectionRequest(String senderId) async {
//     final currentUserId = user?.uid;
//     if (currentUserId == null) return;
//
//     WriteBatch batch = _firestore.batch();
//
//     batch.update(_firestore.collection('users').doc(currentUserId), {'receivedRequests': FieldValue.arrayRemove([senderId])});
//     batch.update(_firestore.collection('users').doc(senderId), {'sentRequests': FieldValue.arrayRemove([currentUserId])});
//
//     await batch.commit();
//   }
//
//
//   Future<void> logout() async {
//     await _auth.signOut();
//   }
// }
//
// class TrekkingPackageProvider {
//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;
//   Stream<List<TrekkingPackage>> get packagesStream =>
//       _firestore.collection('trekking_packages').snapshots().map((snapshot) =>
//           snapshot.docs.map((doc) => TrekkingPackage.fromFirestore(doc)).toList());
// }
//
// class MarketplaceProvider {
//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;
//   Stream<List<GearItem>> get gearItemsStream =>
//       _firestore.collection('gear_items').snapshots().map((snapshot) =>
//           snapshot.docs.map((doc) => GearItem.fromFirestore(doc)).toList());
//
//   Stream<List<GearItem>> getUserGearStream(String userId) {
//     return _firestore.collection('gear_items').where('sellerId', isEqualTo: userId).snapshots().map((snapshot) =>
//         snapshot.docs.map((doc) => GearItem.fromFirestore(doc)).toList());
//   }
//
//   Future<void> addGearItem({
//     required String name,
//     required String condition,
//     required double price,
//     required String imageUrl,
//   }) async {
//     final user = FirebaseAuth.instance.currentUser;
//     if (user == null) return;
//
//     final newGearItem = GearItem(
//       id: '',
//       name: name,
//       condition: condition,
//       price: price,
//       imageUrl: imageUrl,
//       seller: user.email ?? 'Anonymous',
//       sellerId: user.uid,
//       sellerAvatarUrl: user.photoURL ?? "https://picsum.photos/seed/${user.uid}/100/100",
//     );
//
//     await _firestore.collection('gear_items').add(newGearItem.toFirestore());
//   }
// }
//
// class GuidesProvider {
//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;
//   Stream<List<Guide>> get guidesStream =>
//       _firestore.collection('guides').snapshots().map((snapshot) =>
//           snapshot.docs.map((doc) => Guide.fromFirestore(doc)).toList());
// }
//
// class SocialProvider with ChangeNotifier {
//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;
//
//   Stream<List<SocialPost>> get postsStream =>
//       _firestore.collection('social_posts').orderBy('timestamp', descending: true).snapshots().map((snapshot) =>
//           snapshot.docs.map((doc) => SocialPost.fromFirestore(doc)).toList());
//
//   Stream<List<SocialPost>> getUserPostsStream(String userId) {
//     return _firestore.collection('social_posts').where('userId', isEqualTo: userId).orderBy('timestamp', descending: true).snapshots().map((snapshot) =>
//         snapshot.docs.map((doc) => SocialPost.fromFirestore(doc)).toList());
//   }
//
//   Future<void> toggleLike(String postId, List<String> currentLikes) async {
//     final userId = FirebaseAuth.instance.currentUser?.uid;
//     if (userId == null) return;
//
//     final postRef = _firestore.collection('social_posts').doc(postId);
//
//     if (currentLikes.contains(userId)) {
//       await postRef.update({'likes': FieldValue.arrayRemove([userId])});
//     } else {
//       await postRef.update({'likes': FieldValue.arrayUnion([userId])});
//     }
//   }
//
//   Future<void> addPost({required String caption, required String imageUrl}) async {
//     final user = FirebaseAuth.instance.currentUser;
//     if (user == null) return;
//
//     final newPost = SocialPost(
//       userId: user.uid,
//       username: user.email ?? "Anonymous",
//       userAvatarUrl: user.photoURL ?? "https://picsum.photos/seed/${user.uid}/100/100",
//       postImageUrl: imageUrl,
//       caption: caption,
//       commentCount: 0,
//       timestamp: Timestamp.now(),
//       id: '',
//       likes: [],
//     );
//
//     await _firestore.collection('social_posts').add(newPost.toFirestore());
//   }
//
//   Stream<List<Comment>> getComments(String postId) {
//     return _firestore
//         .collection('social_posts')
//         .doc(postId)
//         .collection('comments')
//         .orderBy('timestamp', descending: false)
//         .snapshots()
//         .map((snapshot) => snapshot.docs.map((doc) => Comment.fromFirestore(doc)).toList());
//   }
//
//   Future<void> addComment(String postId, String text) async {
//     final user = FirebaseAuth.instance.currentUser;
//     if (user == null) return;
//
//     final postRef = _firestore.collection('social_posts').doc(postId);
//     final commentRef = postRef.collection('comments').doc();
//
//     final newComment = Comment(
//       id: commentRef.id,
//       userId: user.uid,
//       username: user.email ?? 'Anonymous',
//       text: text,
//       timestamp: Timestamp.now(),
//     );
//
//     await _firestore.runTransaction((transaction) async {
//       transaction.set(commentRef, newComment.toFirestore());
//       transaction.update(postRef, {'commentCount': FieldValue.increment(1)});
//     });
//   }
// }
//
// class ChatProvider with ChangeNotifier {
//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;
//   final FirebaseAuth _auth = FirebaseAuth.instance;
//
//   String getChatRoomId(String userId1, String userId2) {
//     if (userId1.hashCode <= userId2.hashCode) {
//       return '$userId1\_$userId2';
//     } else {
//       return '$userId2\_$userId1';
//     }
//   }
//
//   Stream<List<ChatMessage>> getMessages(String chatRoomId) {
//     return _firestore.collection('chat_rooms').doc(chatRoomId).collection('messages').orderBy('timestamp', descending: true).snapshots().map((snapshot) => snapshot.docs.map((doc) => ChatMessage.fromFirestore(doc)).toList());
//   }
//
//   Future<void> sendMessage(String chatRoomId, String text, String recipientId, String recipientName, String recipientAvatar) async {
//     final currentUser = _auth.currentUser;
//     if (currentUser == null) return;
//
//     final message = ChatMessage(text: text, senderId: currentUser.uid, timestamp: Timestamp.now());
//     final messageCollection = _firestore.collection('chat_rooms').doc(chatRoomId).collection('messages');
//     await messageCollection.add(message.toFirestore());
//
//     await _firestore.collection('chat_rooms').doc(chatRoomId).set({
//       'participants': [currentUser.uid, recipientId],
//       'lastMessage': text,
//       'lastMessageTimestamp': Timestamp.now(),
//       'participant_info': {
//         currentUser.uid: {'name': currentUser.email ?? 'You', 'avatarUrl': currentUser.photoURL ?? 'https://picsum.photos/seed/you/100/100',},
//         recipientId: {'name': recipientName, 'avatarUrl': recipientAvatar,}
//       }
//     }, SetOptions(merge: true));
//   }
//
//   Stream<List<ChatConversation>> getConversationsStream() {
//     final currentUser = _auth.currentUser;
//     if (currentUser == null) return Stream.value([]);
//
//     return _firestore.collection('chat_rooms').where('participants', arrayContains: currentUser.uid).orderBy('lastMessageTimestamp', descending: true).snapshots().map((snapshot) => snapshot.docs.map((doc) => ChatConversation.fromFirestore(doc, currentUser.uid)).toList());
//   }
// }
//
// class UserProvider {
//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;
//
//   Stream<List<UserModel>> searchUsers(String query) {
//     if(query.isEmpty) {
//       return Stream.value([]);
//     }
//     return _firestore.collection('users')
//         .where('fullName', isGreaterThanOrEqualTo: query)
//         .where('fullName', isLessThanOrEqualTo: '$query\uf8ff')
//         .snapshots()
//         .map((snapshot) => snapshot.docs.map((doc) => UserModel.fromFirestore(doc)).toList());
//   }
//
//   Stream<List<UserModel>> getReceivedRequests(List<String> requestIds) {
//     if (requestIds.isEmpty) {
//       return Stream.value([]);
//     }
//     return _firestore.collection('users').where(FieldPath.documentId, whereIn: requestIds).snapshots()
//         .map((snapshot) => snapshot.docs.map((doc) => UserModel.fromFirestore(doc)).toList());
//   }
// }
//
// // --- DATA MODELS (with Firestore conversion) ---
// class UserModel {
//   final String uid; final String email; final String fullName; final String role;
//   final List<String> connections; final List<String> sentRequests; final List<String> receivedRequests;
//
//   UserModel({required this.uid, required this.email, required this.fullName, required this.role, required this.connections, required this.sentRequests, required this.receivedRequests});
//
//   factory UserModel.fromFirestore(DocumentSnapshot doc) {
//     Map data = doc.data() as Map<String, dynamic>;
//     return UserModel(
//       uid: doc.id,
//       email: data['email'] ?? '',
//       fullName: data['fullName'] ?? '',
//       role: data['role'] ?? 'trekker',
//       connections: List<String>.from(data['connections'] ?? []),
//       sentRequests: List<String>.from(data['sentRequests'] ?? []),
//       receivedRequests: List<String>.from(data['receivedRequests'] ?? []),
//     );
//   }
//
//   Map<String, dynamic> toFirestore() {
//     return {
//       'email': email,
//       'fullName': fullName,
//       'role': role,
//       'connections': connections,
//       'sentRequests': sentRequests,
//       'receivedRequests': receivedRequests,
//     };
//   }
// }
// int _parseInt(dynamic value) {
//   if (value is String) return int.tryParse(value) ?? 0;
//   if (value is num) return value.toInt();
//   return 0;
// }
// double _parseDouble(dynamic value) {
//   if (value is String) return double.tryParse(value) ?? 0.0;
//   if (value is num) return value.toDouble();
//   return 0.0;
// }
//
// class TrekkingPackage {
//   final String title; final String location; final String difficulty; final String season; final String imageUrl; final int duration; final double altitude; final double cost; final double rating;
//   TrekkingPackage({ required this.title, required this.location, required this.difficulty, required this.season, required this.imageUrl, required this.duration, required this.altitude, required this.cost, required this.rating });
//   factory TrekkingPackage.fromFirestore(DocumentSnapshot doc) { Map data = doc.data() as Map<String, dynamic>; return TrekkingPackage(title: data['title']??'', location: data['location']??'', difficulty: data['difficulty']??'', season: data['season']??'', imageUrl: data['imageUrl']??'', duration: _parseInt(data['duration']), altitude: _parseDouble(data['altitude']), cost: _parseDouble(data['cost']), rating: _parseDouble(data['rating'])); }
// }
// class GearItem {
//   final String id;
//   final String name; final String condition; final double price; final String imageUrl; final String seller; final String sellerId; final String sellerAvatarUrl;
//   GearItem({ required this.id, required this.name, required this.condition, required this.price, required this.imageUrl, required this.seller, required this.sellerId, required this.sellerAvatarUrl });
//   factory GearItem.fromFirestore(DocumentSnapshot doc) { Map data = doc.data() as Map<String, dynamic>; return GearItem(id: doc.id, name: data['name']??'', condition: data['condition']??'', price: _parseDouble(data['price']), imageUrl: data['imageUrl']??'', seller: data['seller']??'', sellerId: data['sellerId']??'', sellerAvatarUrl: data['sellerAvatarUrl']??''); }
//   Map<String, dynamic> toFirestore() => {'name': name, 'condition': condition, 'price': price, 'imageUrl': imageUrl, 'seller': seller, 'sellerId': sellerId, 'sellerAvatarUrl': sellerAvatarUrl};
// }
// class Guide {
//   final String id; final String name; final String location; final double rating; final List<String> languages; final String bio; final int completedTrips; final double pricePerDay; final String profileImageUrl;
//   Guide({ required this.id, required this.name, required this.location, required this.rating, required this.languages, required this.bio, required this.completedTrips, required this.pricePerDay, required this.profileImageUrl });
//
//   factory Guide.fromFirestore(DocumentSnapshot doc) {
//     Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
//
//     List<String> parsedLanguages = [];
//     if (data['languages'] is List) {
//       parsedLanguages = List<String>.from(data['languages']);
//     } else if (data['languages'] is String) {
//       parsedLanguages = (data['languages'] as String).split(',').map((e) => e.trim()).toList();
//     }
//
//     return Guide(
//         id: doc.id,
//         name: data['name']??'',
//         location: data['location']??'',
//         rating: _parseDouble(data['rating']),
//         languages: parsedLanguages,
//         bio: data['bio']??'',
//         completedTrips: _parseInt(data['completedTrips']),
//         pricePerDay: _parseDouble(data['pricePerDay']),
//         profileImageUrl: data['profileImageUrl']??''
//     );
//   }
// }
// class SocialPost {
//   final String id; final String userId; final String username; final String userAvatarUrl; final String postImageUrl; final String caption; final int commentCount; final Timestamp timestamp; final List<String> likes;
//   SocialPost({ required this.id, required this.userId, required this.username, required this.userAvatarUrl, required this.postImageUrl, required this.caption, required this.commentCount, required this.timestamp, required this.likes });
//   factory SocialPost.fromFirestore(DocumentSnapshot doc) { Map data = doc.data() as Map<String, dynamic>; return SocialPost(id: doc.id, userId: data['userId'] ?? '', username: data['username']??'', userAvatarUrl: data['userAvatarUrl']??'', postImageUrl: data['postImageUrl']??'', caption: data['caption']??'', commentCount: _parseInt(data['commentCount']), timestamp: data['timestamp']??Timestamp.now(), likes: List<String>.from(data['likes'] ?? [])); }
//   Map<String, dynamic> toFirestore() => {'userId': userId, 'username': username, 'userAvatarUrl': userAvatarUrl, 'postImageUrl': postImageUrl, 'caption': caption, 'commentCount': commentCount, 'timestamp': timestamp, 'likes': likes};
// }
// class Comment {
//   final String id; final String userId; final String username; final String text; final Timestamp timestamp;
//   Comment({required this.id, required this.userId, required this.username, required this.text, required this.timestamp});
//   factory Comment.fromFirestore(DocumentSnapshot doc) { Map data = doc.data() as Map<String, dynamic>; return Comment(id: doc.id, userId: data['userId']??'', username: data['username']??'', text: data['text']??'', timestamp: data['timestamp']??Timestamp.now());}
//   Map<String, dynamic> toFirestore() => {'userId': userId, 'username': username, 'text': text, 'timestamp': timestamp};
// }
// class ChatMessage {
//   final String text; final String senderId; final Timestamp timestamp;
//   ChatMessage({ required this.text, required this.senderId, required this.timestamp });
//   factory ChatMessage.fromFirestore(DocumentSnapshot doc) { Map data = doc.data() as Map<String, dynamic>; return ChatMessage(text: data['text'] ?? '', senderId: data['senderId'] ?? '', timestamp: data['timestamp'] ?? Timestamp.now());}
//   Map<String, dynamic> toFirestore() => {'text': text, 'senderId': senderId, 'timestamp': timestamp};
// }
// class ChatConversation {
//   final String chatRoomId; final String otherUserName; final String otherUserAvatarUrl; final String otherUserId; final String lastMessage; final Timestamp timestamp;
//   ChatConversation({ required this.chatRoomId, required this.otherUserName, required this.otherUserAvatarUrl, required this.otherUserId, required this.lastMessage, required this.timestamp });
//   factory ChatConversation.fromFirestore(DocumentSnapshot doc, String currentUserId) { Map data = doc.data() as Map<String, dynamic>; Map participantInfo = data['participant_info'] ?? {}; String otherUserId = ''; String otherUserName = 'Unknown'; String otherUserAvatarUrl = 'https://picsum.photos/seed/unknown/100/100'; List<String> participants = List<String>.from(data['participants'] ?? []); if (participants.isNotEmpty) { otherUserId = participants.firstWhere((id) => id != currentUserId, orElse: () => ''); if (otherUserId.isNotEmpty && participantInfo.containsKey(otherUserId)) { otherUserName = participantInfo[otherUserId]['name'] ?? 'Unknown'; otherUserAvatarUrl = participantInfo[otherUserId]['avatarUrl'] ?? 'https://picsum.photos/seed/unknown/100/100'; } } return ChatConversation( chatRoomId: doc.id, otherUserName: otherUserName, otherUserAvatarUrl: otherUserAvatarUrl, otherUserId: otherUserId, lastMessage: data['lastMessage'] ?? '', timestamp: data['lastMessageTimestamp'] ?? Timestamp.now(), ); }
// }
//
// // --- WIDGETS ---
//
// // --- SKELETON LOADING WIDGETS ---
// class SkeletonBox extends StatelessWidget {
//   final double width;
//   final double height;
//   const SkeletonBox({super.key, required this.width, required this.height});
//
//   @override
//   Widget build(BuildContext context) {
//     return Container(
//       width: width,
//       height: height,
//       decoration: BoxDecoration(
//         color: Colors.grey[300],
//         borderRadius: BorderRadius.circular(8),
//       ),
//     );
//   }
// }
//
// class TrekPackageSkeletonCard extends StatelessWidget {
//   const TrekPackageSkeletonCard({super.key});
//   @override
//   Widget build(BuildContext context) {
//     return Shimmer.fromColors(
//       baseColor: Colors.grey[300]!,
//       highlightColor: Colors.grey[100]!,
//       child: Card(
//         elevation: 4.0,
//         shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15.0)),
//         margin: const EdgeInsets.only(bottom: 20.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             const SkeletonBox(width: double.infinity, height: 200),
//             Padding(
//               padding: const EdgeInsets.all(16.0),
//               child: Column(
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: [
//                   const SkeletonBox(width: 200, height: 24),
//                   const SizedBox(height: 12),
//                   const SkeletonBox(width: 100, height: 16),
//                   const SizedBox(height: 16),
//                   Row(
//                     mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                     children: const [
//                       SkeletonBox(width: 80, height: 30),
//                       SkeletonBox(width: 80, height: 30),
//                       SkeletonBox(width: 80, height: 30),
//                     ],
//                   ),
//                 ],
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
//
// class GuideCardSkeleton extends StatelessWidget {
//   const GuideCardSkeleton({super.key});
//   @override
//   Widget build(BuildContext context) {
//     return Shimmer.fromColors(
//       baseColor: Colors.grey[300]!,
//       highlightColor: Colors.grey[100]!,
//       child: Card(
//         elevation: 4.0,
//         shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15.0)),
//         margin: const EdgeInsets.only(bottom: 20.0),
//         child: Padding(
//           padding: const EdgeInsets.all(16.0),
//           child: Row(
//             children: [
//               const SkeletonBox(width: 80, height: 80),
//               const SizedBox(width: 16.0),
//               Expanded(
//                 child: Column(
//                   crossAxisAlignment: CrossAxisAlignment.start,
//                   children: const [
//                     SkeletonBox(width: 150, height: 24),
//                     SizedBox(height: 8),
//                     SkeletonBox(width: 100, height: 16),
//                   ],
//                 ),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
// }
//
// class SocialPostSkeletonCard extends StatelessWidget {
//   const SocialPostSkeletonCard({super.key});
//   @override
//   Widget build(BuildContext context) {
//     return Shimmer.fromColors(
//       baseColor: Colors.grey[300]!,
//       highlightColor: Colors.grey[100]!,
//       child: Card(
//         elevation: 4.0,
//         shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15.0)),
//         margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 12.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             Padding(
//               padding: const EdgeInsets.all(12.0),
//               child: Row(
//                 children: [
//                   const SkeletonBox(width: 40, height: 40),
//                   const SizedBox(width: 12.0),
//                   Expanded(
//                     child: Column(
//                       crossAxisAlignment: CrossAxisAlignment.start,
//                       children: const [
//                         SkeletonBox(width: 100, height: 16),
//                         SizedBox(height: 4),
//                         SkeletonBox(width: 50, height: 12),
//                       ],
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//             const SkeletonBox(width: double.infinity, height: 300),
//             Padding(
//               padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
//               child: Column(
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: const [
//                   SkeletonBox(width: double.infinity, height: 16),
//                   SizedBox(height: 4),
//                   SkeletonBox(width: 200, height: 16),
//                 ],
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
//
//
// // --- SCREENS & UI WIDGETS ---
//
// // --- AUTHENTICATION FLOW ---
// class AuthWrapper extends StatelessWidget { const AuthWrapper({super.key}); @override Widget build(BuildContext context) { final authProvider = Provider.of<AuthProvider>(context); return StreamBuilder<User?>( stream: authProvider.authStateChanges, builder: (context, snapshot) { if (snapshot.connectionState == ConnectionState.waiting) { return const Scaffold(body: Center(child: CircularProgressIndicator())); } if (snapshot.hasData) { return const MainScreen(); } return const AuthScreen(); }, ); } }
// class AuthScreen extends StatefulWidget { const AuthScreen({super.key}); @override _AuthScreenState createState() => _AuthScreenState(); }
// class _AuthScreenState extends State<AuthScreen> { bool _isLogin = true; void _toggleForm() => setState(() => _isLogin = !_isLogin); @override Widget build(BuildContext context) { return Scaffold( body: Container( decoration: BoxDecoration(gradient: LinearGradient(begin: Alignment.topCenter, end: Alignment.bottomCenter, colors: [Colors.green.shade200, Colors.blue.shade300])), child: Center( child: SingleChildScrollView( padding: const EdgeInsets.all(32.0), child: AnimatedSwitcher( duration: const Duration(milliseconds: 500), transitionBuilder: (child, animation) => FadeTransition(opacity: animation, child: child), child: _isLogin ? LoginWidget(key: const ValueKey('login'), onSwitch: _toggleForm) : SignupWidget(key: const ValueKey('signup'), onSwitch: _toggleForm), ), ), ), ), ); } }
// class LoginWidget extends StatefulWidget { final VoidCallback onSwitch; const LoginWidget({super.key, required this.onSwitch}); @override State<LoginWidget> createState() => _LoginWidgetState(); }
// class _LoginWidgetState extends State<LoginWidget> { final _emailController = TextEditingController(); final _passwordController = TextEditingController(); bool _isLoading = false; Future<void> _handleLogin() async { setState(() => _isLoading = true); final authProvider = Provider.of<AuthProvider>(context, listen: false); final error = await authProvider.login( _emailController.text.trim(), _passwordController.text.trim(), ); if (mounted) { setState(() => _isLoading = false); if (error != null) { ScaffoldMessenger.of(context).showSnackBar( SnackBar(content: Text(error), backgroundColor: Colors.red), ); } } } @override Widget build(BuildContext context) { return Column( mainAxisAlignment: MainAxisAlignment.center, children: [ const Icon(Icons.terrain, size: 80, color: Colors.white), const SizedBox(height: 20), const Text('Welcome Back!', style: TextStyle(fontSize: 32, fontWeight: FontWeight.bold, color: Colors.white)), const Text('Log in to continue your adventure', style: TextStyle(fontSize: 16, color: Colors.white70)), const SizedBox(height: 40), _buildTextField(context, 'Email', Icons.email, false, _emailController), const SizedBox(height: 20), _buildTextField(context, 'Password', Icons.lock, true, _passwordController), const SizedBox(height: 30), _isLoading ? const CircularProgressIndicator(color: Colors.white) : ElevatedButton( style: ElevatedButton.styleFrom(minimumSize: const Size(double.infinity, 50), backgroundColor: Colors.white, foregroundColor: Colors.green.shade800), onPressed: _handleLogin, child: const Text('Login'), ), const SizedBox(height: 20), TextButton(onPressed: widget.onSwitch, child: const Text("Don't have an account? Sign Up", style: TextStyle(color: Colors.white))), ], ); } }
// class SignupWidget extends StatefulWidget {
//   final VoidCallback onSwitch;
//   const SignupWidget({super.key, required this.onSwitch});
//   @override
//   State<SignupWidget> createState() => _SignupWidgetState();
// }
// class _SignupWidgetState extends State<SignupWidget> {
//   final _emailController = TextEditingController();
//   final _passwordController = TextEditingController();
//   final _fullNameController = TextEditingController();
//   bool _isGuide = false;
//   bool _isLoading = false;
//
//   Future<void> _handleSignup() async {
//     if(_fullNameController.text.isEmpty) {
//       ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Please enter your full name.'), backgroundColor: Colors.red));
//       return;
//     }
//     setState(() => _isLoading = true);
//     final authProvider = Provider.of<AuthProvider>(context, listen: false);
//     final error = await authProvider.signup(
//       email: _emailController.text.trim(),
//       password: _passwordController.text.trim(),
//       fullName: _fullNameController.text.trim(),
//       role: _isGuide ? 'guide' : 'trekker',
//     );
//     if (mounted) {
//       setState(() => _isLoading = false);
//       if (error != null) {
//         ScaffoldMessenger.of(context).showSnackBar(
//           SnackBar(content: Text(error), backgroundColor: Colors.red),
//         );
//       }
//     }
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Column(
//       mainAxisAlignment: MainAxisAlignment.center,
//       children: [
//         const Icon(Icons.explore, size: 80, color: Colors.white),
//         const SizedBox(height: 20),
//         const Text('Create Account', style: TextStyle(fontSize: 32, fontWeight: FontWeight.bold, color: Colors.white)),
//         const Text('Start your trekking journey with us', style: TextStyle(fontSize: 16, color: Colors.white70)),
//         const SizedBox(height: 40),
//         _buildTextField(context, 'Full Name', Icons.person, false, _fullNameController),
//         const SizedBox(height: 20),
//         _buildTextField(context, 'Email', Icons.email, false, _emailController),
//         const SizedBox(height: 20),
//         _buildTextField(context, 'Password', Icons.lock, true, _passwordController),
//         const SizedBox(height: 20),
//         SwitchListTile(
//           title: const Text('Register as a Guide?', style: TextStyle(color: Colors.white)),
//           value: _isGuide,
//           onChanged: (bool value) => setState(() => _isGuide = value),
//           activeColor: Colors.green.shade200,
//         ),
//         const SizedBox(height: 30),
//         _isLoading ? const CircularProgressIndicator(color: Colors.white) : ElevatedButton(
//           style: ElevatedButton.styleFrom(minimumSize: const Size(double.infinity, 50), backgroundColor: Colors.white, foregroundColor: Colors.green.shade800),
//           onPressed: _handleSignup,
//           child: const Text('Sign Up'),
//         ),
//         const SizedBox(height: 20),
//         TextButton(onPressed: widget.onSwitch, child: const Text('Already have an account? Log In', style: TextStyle(color: Colors.white))),
//       ],
//     );
//   }
// }
// Widget _buildTextField(BuildContext context, String hint, IconData icon, bool isPassword, TextEditingController? controller) { return TextField( controller: controller, obscureText: isPassword, style: const TextStyle(color: Colors.white), decoration: InputDecoration( hintText: hint, hintStyle: TextStyle(color: Colors.white.withOpacity(0.7)), prefixIcon: Icon(icon, color: Colors.white), filled: true, fillColor: Colors.white.withOpacity(0.2), border: OutlineInputBorder(borderRadius: BorderRadius.circular(30.0), borderSide: BorderSide.none), ), ); }
//
//
// // --- MAIN APP SCREEN & NAVIGATION ---
// class MainScreen extends StatefulWidget { const MainScreen({super.key}); @override State<MainScreen> createState() => _MainScreenState(); }
// class _MainScreenState extends State<MainScreen> {
//   int _selectedIndex = 0;
//
//   static final List<Widget> _widgetOptions = [
//     TrekkingPackageFinder(),
//     Marketplace(),
//     SocialNetwork(),
//     ChatListScreen(),
//     ProfileScreen(),
//   ];
//
//   void _onItemTapped(int index) => setState(() => _selectedIndex = index);
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text("EasyTrek"),
//         actions: [
//           IconButton(
//             icon: const Icon(Icons.logout),
//             onPressed: () {
//               Provider.of<AuthProvider>(context, listen: false).logout();
//             },
//           )
//         ],
//       ),
//       body: IndexedStack(index: _selectedIndex, children: _widgetOptions),
//       bottomNavigationBar: BottomNavigationBar(
//         items: <BottomNavigationBarItem>[
//           BottomNavigationBarItem(icon: Icon(_selectedIndex == 0 ? Icons.explore : Icons.explore_outlined), label: 'Explore'),
//           BottomNavigationBarItem(icon: Icon(_selectedIndex == 1 ? Icons.store : Icons.store_outlined), label: 'Marketplace'),
//           BottomNavigationBarItem(icon: Icon(_selectedIndex == 2 ? Icons.people_alt : Icons.people_alt_outlined), label: 'Community'),
//           BottomNavigationBarItem(icon: Icon(_selectedIndex == 3 ? Icons.chat_bubble : Icons.chat_bubble_outline), label: 'Chat'),
//           BottomNavigationBarItem(icon: Icon(_selectedIndex == 4 ? Icons.person : Icons.person_outline), label: 'Profile'),
//         ],
//         currentIndex: _selectedIndex,
//         selectedItemColor: Theme.of(context).primaryColor,
//         unselectedItemColor: Colors.grey,
//         onTap: _onItemTapped,
//         type: BottomNavigationBarType.fixed,
//         showUnselectedLabels: false,
//       ),
//     );
//   }
// }
//
// // --- WIDGET DEFINITIONS (in correct order) ---
//
// class TrekkingPackageFinder extends StatelessWidget {
//   const TrekkingPackageFinder({super.key});
//   @override
//   Widget build(BuildContext context) {
//     return StreamBuilder<List<TrekkingPackage>>(
//       stream: Provider.of<TrekkingPackageProvider>(context).packagesStream,
//       builder: (context, snapshot) {
//         if (snapshot.hasError) return Center(child: Text('Error: ${snapshot.error}'));
//
//         return Column(
//           children: [
//             const GuidesStories(),
//             Expanded(
//                 child: !snapshot.hasData
//                     ? ListView.builder(
//                   padding: const EdgeInsets.fromLTRB(16,0,16,16),
//                   itemCount: 3,
//                   itemBuilder: (c, i) => const TrekPackageSkeletonCard(),
//                 )
//                     : snapshot.data!.isEmpty
//                     ? const Center(child: Text('No treks found!'))
//                     : ListView.builder(padding: const EdgeInsets.fromLTRB(16,0,16,16), itemCount: snapshot.data!.length, itemBuilder: (c, i) => TrekPackageCard(package: snapshot.data![i]))
//             ),
//           ],
//         );
//       },
//     );
//   }
// }
//
// class GuidesStories extends StatelessWidget {
//   const GuidesStories({super.key});
//   @override
//   Widget build(BuildContext context) {
//     return StreamBuilder<List<Guide>>(
//       stream: Provider.of<GuidesProvider>(context).guidesStream,
//       builder: (context, snapshot) {
//         if (!snapshot.hasData) return const SizedBox(height: 110);
//         final guides = snapshot.data!;
//         return Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
//           Padding(padding: const EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 8.0), child: Text("Top Guides", style: Theme.of(context).textTheme.titleLarge)),
//           SizedBox(height: 100, child: ListView.builder(scrollDirection: Axis.horizontal, padding: const EdgeInsets.symmetric(horizontal: 12.0), itemCount: guides.length, itemBuilder: (context, index) {
//             final guide = guides[index];
//             return InkWell(onTap: () => Navigator.of(context).push(MaterialPageRoute(builder: (context) => GuideProfileScreen(guide: guide))), child: Padding(padding: const EdgeInsets.symmetric(horizontal: 4.0), child: SizedBox(width: 80, child: Column(children: [
//               CircleAvatar(radius: 35, backgroundImage: NetworkImage(guide.profileImageUrl)),
//               const SizedBox(height: 8),
//               Text(guide.name.split(' ').first, overflow: TextOverflow.ellipsis, style: const TextStyle(fontSize: 12)),
//             ]))));
//           })),
//         ]);
//       },
//     );
//   }
// }
//
// class Marketplace extends StatelessWidget {
//   const Marketplace({super.key});
//   @override
//   Widget build(BuildContext context) {
//     return StreamBuilder<List<GearItem>>(
//       stream: Provider.of<MarketplaceProvider>(context).gearItemsStream,
//       builder: (context, snapshot) {
//         if (snapshot.hasError) return Center(child: Text('Error: ${snapshot.error}'));
//         return Scaffold(
//           body: !snapshot.hasData
//               ? Shimmer.fromColors(
//             baseColor: Colors.grey[300]!,
//             highlightColor: Colors.grey[100]!,
//             child: GridView.builder(padding: const EdgeInsets.all(16.0), gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2, crossAxisSpacing: 16.0, mainAxisSpacing: 16.0, childAspectRatio: 0.8), itemCount: 6, itemBuilder: (c, i) => Card(elevation: 3.0, shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15.0)), child: const SkeletonBox(width: double.infinity, height: double.infinity))),
//           )
//               : snapshot.data!.isEmpty
//               ? const Center(child: Text('No gear for sale yet!'))
//               : GridView.builder(padding: const EdgeInsets.all(16.0), gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2, crossAxisSpacing: 16.0, mainAxisSpacing: 16.0, childAspectRatio: 0.8), itemCount: snapshot.data!.length, itemBuilder: (c, i) => GearItemCard(item: snapshot.data![i], heroTagPrefix: 'marketplace')),
//           floatingActionButton: FloatingActionButton.extended(
//             heroTag: 'fab_marketplace',
//             onPressed: () => Navigator.of(context).push(MaterialPageRoute(builder: (context) => const SellGearScreen())),
//             label: const Text('Sell Your Gear'),
//             icon: const Icon(Icons.add_shopping_cart),
//             backgroundColor: Theme.of(context).colorScheme.secondary,
//           ),
//         );
//       },
//     );
//   }
// }
//
// class SocialNetwork extends StatelessWidget {
//   const SocialNetwork({super.key});
//   @override
//   Widget build(BuildContext context) {
//     return StreamBuilder<List<SocialPost>>(
//         stream: Provider.of<SocialProvider>(context).postsStream,
//         builder: (context, snapshot) {
//           if (snapshot.hasError) return Center(child: Text('Error: ${snapshot.error}'));
//           return Scaffold(
//             body: !snapshot.hasData
//                 ? ListView.builder(itemCount: 3, itemBuilder: (c, i) => const SocialPostSkeletonCard())
//                 : snapshot.data!.isEmpty
//                 ? const Center(child: Text('No posts yet. Be the first!'))
//                 : ListView.builder(padding: const EdgeInsets.all(8.0), itemCount: snapshot.data!.length, itemBuilder: (c, i) => SocialPostCard(post: snapshot.data![i])),
//             floatingActionButton: FloatingActionButton(
//                 heroTag: 'fab_social',
//                 onPressed: () => Navigator.of(context).push(MaterialPageRoute(builder: (context) => const CreatePostScreen())),
//                 backgroundColor: Theme.of(context).primaryColor,
//                 child: const Icon(Icons.edit)
//             ),
//           );
//         }
//     );
//   }
// }
//
//
// class TrekPackageCard extends StatelessWidget {
//   final TrekkingPackage package;
//   const TrekPackageCard({super.key, required this.package});
//
//   void _showBookingConfirmationDialog(
//       BuildContext context,
//       TrekkingPackage package,
//       ) {
//     showDialog(
//       context: context,
//       builder: (BuildContext context) => AlertDialog(
//         shape: RoundedRectangleBorder(
//           borderRadius: BorderRadius.circular(20.0),
//         ),
//         title: const Text('Booking Confirmed!'),
//         content: Column(
//           mainAxisSize: MainAxisSize.min,
//           children: [
//             const Icon(
//               Icons.check_circle_outline,
//               color: Colors.green,
//               size: 60,
//             ),
//             const SizedBox(height: 16),
//             Text(
//               'You have successfully booked the ${package.title}. Get ready for an adventure!',
//               textAlign: TextAlign.center,
//             ),
//           ],
//         ),
//         actions: [
//           TextButton(
//             child: const Text('Done'),
//             onPressed: () => Navigator.of(context).pop(),
//           ),
//         ],
//       ),
//     );
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Card(
//       elevation: 4.0,
//       shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15.0)),
//       margin: const EdgeInsets.only(bottom: 20.0),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           ClipRRect(
//             borderRadius: const BorderRadius.only(
//               topLeft: Radius.circular(15.0),
//               topRight: Radius.circular(15.0),
//             ),
//             child: Image.network(
//               package.imageUrl,
//               height: 200,
//               width: double.infinity,
//               fit: BoxFit.cover,
//               errorBuilder: (c, e, s) => Container(
//                 height: 200,
//                 color: Colors.grey[300],
//                 child: Icon(Icons.landscape, size: 50, color: Colors.grey[600]),
//               ),
//             ),
//           ),
//           Padding(
//             padding: const EdgeInsets.all(16.0),
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(
//                   package.title,
//                   style: Theme.of(context).textTheme.titleLarge,
//                 ),
//                 const SizedBox(height: 8.0),
//                 Row(
//                   children: [
//                     Icon(
//                       Icons.location_on,
//                       size: 16.0,
//                       color: Theme.of(context).primaryColor,
//                     ),
//                     const SizedBox(width: 4.0),
//                     Text(
//                       package.location,
//                       style: Theme.of(context).textTheme.bodyMedium,
//                     ),
//                   ],
//                 ),
//                 const SizedBox(height: 12.0),
//                 Row(
//                   mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                   children: [
//                     _buildInfoChip(
//                       context,
//                       Icons.terrain,
//                       '${package.altitude.toInt()}m',
//                     ),
//                     _buildInfoChip(
//                       context,
//                       Icons.timer,
//                       '${package.duration} days',
//                     ),
//                     _buildInfoChip(context, Icons.star, '${package.rating}'),
//                   ],
//                 ),
//                 const Divider(height: 30),
//                 Row(
//                   mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                   children: [
//                     Text(
//                       '\$${package.cost.toInt()}',
//                       style: Theme.of(context).textTheme.headlineSmall
//                           ?.copyWith(color: Theme.of(context).primaryColor),
//                     ),
//                     ElevatedButton(
//                       onPressed: () =>
//                           _showBookingConfirmationDialog(context, package),
//                       child: const Text('Book Now'),
//                     ),
//                   ],
//                 )
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }
//   Widget _buildInfoChip(BuildContext context, IconData icon, String label) =>
//       Chip(
//         avatar: Icon(icon, size: 18.0, color: Theme.of(context).primaryColor),
//         label: Text(label, style: const TextStyle(fontWeight: FontWeight.bold)),
//         backgroundColor: Theme.of(context).primaryColor.withOpacity(0.1),
//         padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
//       );
// }
//
// class GearItemCard extends StatelessWidget {
//   final GearItem item;
//   final String heroTagPrefix;
//   const GearItemCard({
//     super.key,
//     required this.item,
//     required this.heroTagPrefix,
//   });
//   @override
//   Widget build(BuildContext context) {
//     return InkWell(
//       onTap: () => Navigator.of(context).push(
//         MaterialPageRoute(
//           builder: (context) =>
//               GearDetailScreen(item: item, heroTagPrefix: heroTagPrefix),
//         ),
//       ),
//       child: Card(
//         elevation: 3.0,
//         shape: RoundedRectangleBorder(
//           borderRadius: BorderRadius.circular(15.0),
//         ),
//         clipBehavior: Clip.antiAlias,
//         child: Stack(
//           alignment: Alignment.bottomCenter,
//           children: [
//             Positioned.fill(
//               child: Hero(
//                 tag: '${heroTagPrefix}_${item.id}',
//                 child: Image.network(
//                   item.imageUrl,
//                   fit: BoxFit.cover,
//                   errorBuilder: (c, e, s) => Container(
//                     color: Colors.grey[300],
//                     child: Icon(
//                       Icons.shopping_bag_outlined,
//                       size: 40,
//                       color: Colors.grey[600],
//                     ),
//                   ),
//                 ),
//               ),
//             ),
//             Container(
//               height: 80,
//               decoration: BoxDecoration(
//                 gradient: LinearGradient(
//                   colors: [
//                     Colors.black.withOpacity(0.8),
//                     Colors.black.withOpacity(0.0),
//                   ],
//                   begin: Alignment.bottomCenter,
//                   end: Alignment.topCenter,
//                 ),
//               ),
//             ),
//             Padding(
//               padding: const EdgeInsets.all(12.0),
//               child: Column(
//                 mainAxisAlignment: MainAxisAlignment.end,
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: [
//                   Text(
//                     item.name,
//                     style: Theme.of(context).textTheme.bodyLarge?.copyWith(
//                       fontWeight: FontWeight.bold,
//                       color: Colors.white,
//                     ),
//                     maxLines: 2,
//                     overflow: TextOverflow.ellipsis,
//                   ),
//                   const SizedBox(height: 4.0),
//                   Text(
//                     '\$${item.price.toStringAsFixed(2)}',
//                     style: Theme.of(context).textTheme.titleMedium?.copyWith(
//                       color: Colors.white,
//                       fontWeight: FontWeight.bold,
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//             Positioned(
//               top: 8,
//               right: 8,
//               child: CircleAvatar(
//                 radius: 16,
//                 backgroundImage: NetworkImage(item.sellerAvatarUrl),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
//
// class GearDetailScreen extends StatelessWidget {
//   final GearItem item;
//   final String heroTagPrefix;
//   const GearDetailScreen({
//     super.key,
//     required this.item,
//     required this.heroTagPrefix,
//   });
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: Text(item.name),
//         backgroundColor: Colors.transparent,
//         elevation: 0,
//       ),
//       extendBodyBehindAppBar: true,
//       body: Column(
//         children: [
//           Hero(
//             tag: '${heroTagPrefix}_${item.id}',
//             child: Container(
//               height: MediaQuery.of(context).size.height * 0.4,
//               decoration: BoxDecoration(
//                 image: DecorationImage(
//                   image: NetworkImage(item.imageUrl),
//                   fit: BoxFit.cover,
//                 ),
//               ),
//             ),
//           ),
//           Expanded(
//             child: SingleChildScrollView(
//               padding: const EdgeInsets.all(24.0),
//               child: Column(
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: [
//                   Text(
//                     item.name,
//                     style: Theme.of(
//                       context,
//                     ).textTheme.headlineSmall?.copyWith(fontSize: 28),
//                   ),
//                   const SizedBox(height: 8),
//                   Chip(
//                     label: Text(
//                       item.condition,
//                       style: const TextStyle(fontWeight: FontWeight.bold),
//                     ),
//                     backgroundColor: Colors.green.withOpacity(0.1),
//                     avatar: const Icon(
//                       Icons.check_circle_outline,
//                       color: Colors.green,
//                     ),
//                   ),
//                   const SizedBox(height: 24),
//                   const Text(
//                     "Description",
//                     style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
//                   ),
//                   const SizedBox(height: 8),
//                   Text(
//                     "A detailed description of the gear item would go here, explaining its features, age, and any other relevant information for a potential buyer.",
//                     style: TextStyle(color: Colors.grey[700], height: 1.5),
//                   ),
//                   const Divider(height: 48),
//                   ListTile(
//                     leading: CircleAvatar(
//                       backgroundImage: NetworkImage(item.sellerAvatarUrl),
//                     ),
//                     title: const Text("Seller"),
//                     subtitle: Text(
//                       item.seller,
//                       style: const TextStyle(fontWeight: FontWeight.bold),
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//           ),
//         ],
//       ),
//       bottomNavigationBar: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Row(
//           children: [
//             Expanded(
//               flex: 2,
//               child: ElevatedButton(
//                 onPressed: () {},
//                 child: const Text('Buy Now'),
//               ),
//             ),
//             const SizedBox(width: 16),
//             Expanded(
//               flex: 1,
//               child: IconButton(
//                 onPressed: () {},
//                 icon: const Icon(Icons.message_outlined),
//                 style: IconButton.styleFrom(
//                   backgroundColor: Colors.grey[200],
//                   padding: const EdgeInsets.all(16),
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
//
// class SellGearScreen extends StatefulWidget {
//   const SellGearScreen({super.key});
//   @override
//   State<SellGearScreen> createState() => _SellGearScreenState();
// }
//
// class _SellGearScreenState extends State<SellGearScreen> {
//   final _formKey = GlobalKey<FormState>();
//   final _nameController = TextEditingController();
//   final _priceController = TextEditingController();
//   String? _selectedCondition = 'New';
//   final _conditions = ['New', 'Used - Like New', 'Used - Good', 'Used - Fair'];
//
//   Future<void> _submitForm() async {
//     if (_formKey.currentState!.validate()) {
//       ScaffoldMessenger.of(
//         context,
//       ).showSnackBar(const SnackBar(content: Text('Listing your item...')));
//
//       final marketplaceProvider = Provider.of<MarketplaceProvider>(
//         context,
//         listen: false,
//       );
//       await marketplaceProvider.addGearItem(
//         name: _nameController.text,
//         condition: _selectedCondition!,
//         price: double.tryParse(_priceController.text) ?? 0.0,
//         imageUrl:
//         "https://picsum.photos/seed/${Random().nextInt(1000)}/400/400", // Placeholder
//       );
//
//       if (mounted) {
//         Navigator.of(context).pop();
//       }
//     }
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: const Text('Sell Your Gear')),
//       body: SingleChildScrollView(
//         padding: const EdgeInsets.all(24.0),
//         child: Form(
//           key: _formKey,
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.stretch,
//             children: [
//               Container(
//                 height: 200,
//                 decoration: BoxDecoration(
//                   color: Colors.grey[200],
//                   borderRadius: BorderRadius.circular(15.0),
//                 ),
//                 child: InkWell(
//                   onTap: () {},
//                   child: Column(
//                     mainAxisAlignment: MainAxisAlignment.center,
//                     children: [
//                       Icon(
//                         Icons.add_a_photo,
//                         size: 50,
//                         color: Colors.grey[600],
//                       ),
//                       const SizedBox(height: 8.0),
//                       Text(
//                         'Tap to upload photos',
//                         style: TextStyle(color: Colors.grey[800]),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//               const SizedBox(height: 24),
//               TextFormField(
//                 controller: _nameController,
//                 decoration: const InputDecoration(
//                   labelText: 'Item Title',
//                   border: OutlineInputBorder(),
//                 ),
//                 validator: (v) =>
//                 (v?.isEmpty ?? true) ? 'Please enter a title' : null,
//               ),
//               const SizedBox(height: 16),
//               DropdownButtonFormField<String>(
//                 decoration: const InputDecoration(
//                   labelText: 'Condition',
//                   border: OutlineInputBorder(),
//                 ),
//                 value: _selectedCondition,
//                 items: _conditions
//                     .map(
//                       (c) => DropdownMenuItem<String>(value: c, child: Text(c)),
//                 )
//                     .toList(),
//                 onChanged: (v) => setState(() => _selectedCondition = v),
//               ),
//               const SizedBox(height: 16),
//               TextFormField(
//                 controller: _priceController,
//                 decoration: const InputDecoration(
//                   labelText: 'Price (\$)',
//                   prefixText: '\$',
//                   border: OutlineInputBorder(),
//                 ),
//                 keyboardType: TextInputType.number,
//                 validator: (v) =>
//                 (v?.isEmpty ?? true) ? 'Please enter a price' : null,
//               ),
//               const SizedBox(height: 32),
//               ElevatedButton(
//                 onPressed: _submitForm,
//                 child: const Text('List My Item'),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
// }
//
// class GuideCard extends StatelessWidget {
//   final Guide guide;
//   const GuideCard({super.key, required this.guide});
//   @override
//   Widget build(BuildContext context) {
//     return Card(
//       elevation: 4.0,
//       shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15.0)),
//       margin: const EdgeInsets.only(bottom: 20.0),
//       child: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           children: [
//             Row(
//               children: [
//                 CircleAvatar(
//                   radius: 40,
//                   backgroundImage: NetworkImage(guide.profileImageUrl),
//                 ),
//                 const SizedBox(width: 16.0),
//                 Expanded(
//                   child: Column(
//                     crossAxisAlignment: CrossAxisAlignment.start,
//                     children: [
//                       Text(
//                         guide.name,
//                         style: Theme.of(context).textTheme.titleLarge,
//                       ),
//                       const SizedBox(height: 4.0),
//                       Row(
//                         children: [
//                           Icon(
//                             Icons.location_on,
//                             size: 16.0,
//                             color: Theme.of(context).primaryColor,
//                           ),
//                           const SizedBox(width: 4.0),
//                           Expanded(
//                             child: Text(
//                               guide.location,
//                               style: Theme.of(context).textTheme.bodyMedium,
//                               overflow: TextOverflow.ellipsis,
//                             ),
//                           ),
//                         ],
//                       ),
//                       const SizedBox(height: 4.0),
//                       Row(
//                         children: [
//                           Icon(Icons.star, color: Colors.amber, size: 18),
//                           const SizedBox(width: 4),
//                           Text(
//                             guide.rating.toString(),
//                             style: const TextStyle(fontWeight: FontWeight.bold),
//                           ),
//                           const SizedBox(width: 8),
//                           Text('(${guide.completedTrips} trips)'),
//                         ],
//                       ),
//                     ],
//                   ),
//                 ),
//               ],
//             ),
//             const SizedBox(height: 16.0),
//             Text(
//               guide.bio,
//               maxLines: 2,
//               overflow: TextOverflow.ellipsis,
//               style: Theme.of(context).textTheme.bodyMedium,
//             ),
//             const Divider(height: 30),
//             Row(
//               mainAxisAlignment: MainAxisAlignment.spaceBetween,
//               children: [
//                 Text(
//                   '\$${guide.pricePerDay.toInt()}/day',
//                   style: Theme.of(context).textTheme.titleLarge?.copyWith(
//                     color: Theme.of(context).primaryColor,
//                   ),
//                 ),
//                 ElevatedButton(
//                   onPressed: () => Navigator.of(context).push(
//                     MaterialPageRoute(
//                       builder: (context) => GuideProfileScreen(guide: guide),
//                     ),
//                   ),
//                   style: ElevatedButton.styleFrom(
//                     backgroundColor: Theme.of(context).colorScheme.secondary,
//                   ),
//                   child: const Text('View Profile'),
//                 ),
//               ],
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
//
// class GuideProfileScreen extends StatelessWidget {
//   final Guide guide;
//   const GuideProfileScreen({super.key, required this.guide});
//   @override
//   Widget build(BuildContext context) {
//     return DefaultTabController(
//       length: 3,
//       child: Scaffold(
//         body: NestedScrollView(
//           headerSliverBuilder: (context, innerBoxIsScrolled) => [
//             SliverAppBar(
//               expandedHeight: 250.0,
//               floating: false,
//               pinned: true,
//               flexibleSpace: FlexibleSpaceBar(
//                 centerTitle: true,
//                 title: Text(
//                   guide.name,
//                   style: const TextStyle(color: Colors.white, fontSize: 16.0),
//                 ),
//                 background: Hero(
//                   tag: guide.profileImageUrl,
//                   child: Image.network(
//                     guide.profileImageUrl,
//                     fit: BoxFit.cover,
//                     color: Colors.black.withOpacity(0.4),
//                     colorBlendMode: BlendMode.darken,
//                   ),
//                 ),
//               ),
//             ),
//             SliverPersistentHeader(
//               delegate: _SliverAppBarDelegate(
//                 TabBar(
//                   labelColor: Theme.of(context).primaryColor,
//                   unselectedLabelColor: Colors.grey,
//                   tabs: const [
//                     Tab(icon: Icon(Icons.person), text: "About"),
//                     Tab(icon: Icon(Icons.hiking), text: "Trips"),
//                     Tab(icon: Icon(Icons.reviews), text: "Reviews"),
//                   ],
//                 ),
//               ),
//               pinned: true,
//             ),
//           ],
//           body: TabBarView(
//             children: [
//               _buildAboutTab(context, guide),
//               const Center(child: Text("Trips")),
//               const Center(child: Text("Reviews")),
//             ],
//           ),
//         ),
//         floatingActionButton: FloatingActionButton.extended(
//           heroTag: 'fab_guide_profile_${guide.name}',
//           onPressed: () {
//             final recipient = UserModel(
//               uid: guide.id,
//               fullName: guide.name,
//               email: '', // Not available/needed here
//               role: 'guide',
//               connections: [],
//               sentRequests: [],
//               receivedRequests: [],
//             );
//             Navigator.of(context).push(MaterialPageRoute(builder: (context) => ChatScreen(recipient: recipient)));
//           },
//           label: const Text('Contact Guide'),
//           icon: const Icon(Icons.message),
//           backgroundColor: Theme.of(context).primaryColor,
//         ),
//       ),
//     );
//   }
//
//   Widget _buildAboutTab(BuildContext context, Guide guide) {
//     return SingleChildScrollView(
//       padding: const EdgeInsets.all(24.0),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Text(
//             "About ${guide.name}",
//             style: Theme.of(context).textTheme.headlineSmall,
//           ),
//           const SizedBox(height: 16),
//           Text(
//             guide.bio,
//             style:
//             Theme.of(context).textTheme.bodyLarge?.copyWith(height: 1.5),
//           ),
//           const Divider(height: 48),
//           _buildInfoRow(context, Icons.location_on, "Location", guide.location),
//           _buildInfoRow(
//             context,
//             Icons.translate,
//             "Languages",
//             guide.languages.join(', '),
//           ),
//           _buildInfoRow(
//             context,
//             Icons.star_border,
//             "Rating",
//             "${guide.rating}/5.0",
//           ),
//           _buildInfoRow(
//             context,
//             Icons.hiking,
//             "Completed Trips",
//             "${guide.completedTrips}",
//           ),
//           _buildInfoRow(
//             context,
//             Icons.price_change,
//             "Rate",
//             "\$${guide.pricePerDay.toInt()}/day",
//           ),
//         ],
//       ),
//     );
//   }
//
//   Widget _buildInfoRow(
//       BuildContext context,
//       IconData icon,
//       String label,
//       String value,
//       ) {
//     return Padding(
//       padding: const EdgeInsets.symmetric(vertical: 8.0),
//       child: Row(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Icon(icon, color: Theme.of(context).primaryColor, size: 22),
//           const SizedBox(width: 16),
//           Expanded(
//             child: Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(
//                   label,
//                   style: Theme.of(
//                     context,
//                   ).textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),
//                 ),
//                 const SizedBox(height: 2),
//                 Text(value, style: Theme.of(context).textTheme.titleMedium),
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }
//
// class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
//   _SliverAppBarDelegate(this._tabBar);
//   final TabBar _tabBar;
//   @override
//   double get minExtent => _tabBar.preferredSize.height;
//   @override
//   double get maxExtent => _tabBar.preferredSize.height;
//   @override
//   Widget build(
//       BuildContext context,
//       double shrinkOffset,
//       bool overlapsContent,
//       ) => Container(color: Colors.white, child: _tabBar);
//   @override
//   bool shouldRebuild(_SliverAppBarDelegate oldDelegate) => false;
// }
//
// class CreatePostScreen extends StatefulWidget {
//   const CreatePostScreen({super.key});
//   @override
//   _CreatePostScreenState createState() => _CreatePostScreenState();
// }
//
// class _CreatePostScreenState extends State<CreatePostScreen> {
//   final _captionController = TextEditingController();
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('Create Post'),
//         actions: [
//           TextButton(
//             onPressed: () {
//               Provider.of<SocialProvider>(context, listen: false).addPost(
//                 caption: _captionController.text,
//                 imageUrl:
//                 "https://picsum.photos/seed/${Random().nextInt(1000)}/600/500",
//               );
//               Navigator.of(context).pop();
//             },
//             child: const Text('Post', style: TextStyle(fontSize: 18)),
//           ),
//         ],
//       ),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           children: [
//             Container(
//               height: 200,
//               width: double.infinity,
//               decoration: BoxDecoration(
//                 color: Colors.grey[200],
//                 borderRadius: BorderRadius.circular(12),
//               ),
//               child: InkWell(
//                 onTap: () {},
//                 child: const Center(
//                   child: Icon(
//                     Icons.add_a_photo_outlined,
//                     size: 60,
//                     color: Colors.grey,
//                   ),
//                 ),
//               ),
//             ),
//             const SizedBox(height: 16),
//             TextField(
//               controller: _captionController,
//               decoration: const InputDecoration(
//                 hintText: 'Write a caption...',
//                 border: InputBorder.none,
//               ),
//               maxLines: 5,
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
//
// class SocialPostCard extends StatelessWidget {
//   final SocialPost post;
//   const SocialPostCard({super.key, required this.post});
//
//   @override
//   Widget build(BuildContext context) {
//     final socialProvider = Provider.of<SocialProvider>(context, listen: false);
//     final authProvider = Provider.of<AuthProvider>(context);
//     final userId = authProvider.user?.uid;
//     final isLiked = userId != null && post.likes.contains(userId);
//
//     return Card(
//       elevation: 4.0,
//       shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15.0)),
//       margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 12.0),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Padding(
//             padding: const EdgeInsets.all(12.0),
//             child: Row(
//               children: [
//                 CircleAvatar(
//                   radius: 20,
//                   backgroundImage: NetworkImage(post.userAvatarUrl),
//                 ),
//                 const SizedBox(width: 12.0),
//                 Expanded(
//                   child: Column(
//                     crossAxisAlignment: CrossAxisAlignment.start,
//                     children: [
//                       Text(
//                         post.username,
//                         style: const TextStyle(fontWeight: FontWeight.bold),
//                       ),
//                       Text(post.timestamp.toDate().toLocal().toString()),
//                     ],
//                   ),
//                 ),
//                 if(userId != null && post.userId != userId)
//                   IconButton(
//                     icon: const Icon(Icons.more_horiz),
//                     onPressed: () {
//                       _showPostOptions(context, post);
//                     },
//                   ),
//               ],
//             ),
//           ),
//           Image.network(
//             post.postImageUrl,
//             height: 300,
//             width: double.infinity,
//             fit: BoxFit.cover,
//           ),
//           Padding(
//             padding: const EdgeInsets.symmetric(
//               horizontal: 16.0,
//               vertical: 12.0,
//             ),
//             child: Text(
//               post.caption,
//               style: Theme.of(context).textTheme.bodyLarge,
//             ),
//           ),
//           const Divider(height: 1),
//           Padding(
//             padding: const EdgeInsets.symmetric(horizontal: 8.0),
//             child: Row(
//               mainAxisAlignment: MainAxisAlignment.spaceBetween,
//               children: [
//                 _buildActionButton(
//                   icon: isLiked ? Icons.favorite : Icons.favorite_border,
//                   label: '${post.likes.length}',
//                   onPressed: () =>
//                       socialProvider.toggleLike(post.id, post.likes),
//                   color: isLiked ? Colors.red : Colors.grey[700],
//                 ),
//                 _buildActionButton(
//                   icon: Icons.comment_outlined,
//                   label: '${post.commentCount}',
//                   onPressed: () => Navigator.of(context).push(
//                     MaterialPageRoute(
//                       builder: (context) => CommentsScreen(postId: post.id),
//                     ),
//                   ),
//                 ),
//                 _buildActionButton(
//                   icon: Icons.share_outlined,
//                   label: 'Share',
//                   onPressed: () {},
//                 ),
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }
//
//   void _showPostOptions(BuildContext context, SocialPost post) {
//     final authProvider = Provider.of<AuthProvider>(context, listen: false);
//     final currentUser = authProvider.userModel;
//     if (currentUser == null) return;
//
//     final isConnected = currentUser.connections.contains(post.userId);
//     final requestSent = currentUser.sentRequests.contains(post.userId);
//
//     showModalBottomSheet(
//       context: context,
//       builder: (context) {
//         return Wrap(
//           children: [
//             if (!isConnected && !requestSent)
//               ListTile(
//                 leading: const Icon(Icons.person_add_alt_1_outlined),
//                 title: const Text('Add Friend'),
//                 onTap: () {
//                   authProvider.sendConnectionRequest(post.userId);
//                   Navigator.pop(context);
//                 },
//               ),
//             ListTile(
//               leading: const Icon(Icons.report_gmailerrorred),
//               title: const Text('Report Post'),
//               onTap: () {
//                 // TODO: Implement report functionality
//                 Navigator.pop(context);
//               },
//             ),
//           ],
//         );
//       },
//     );
//   }
//
//   Widget _buildActionButton({
//     required IconData icon,
//     required String label,
//     required VoidCallback onPressed,
//     Color? color,
//   }) => TextButton.icon(
//     onPressed: onPressed,
//     icon: Icon(icon, size: 20.0, color: color ?? Colors.grey[700]),
//     label: Text(label, style: TextStyle(color: color ?? Colors.grey[800])),
//   );
// }
//
// class CommentsScreen extends StatelessWidget {
//   final String postId;
//   const CommentsScreen({super.key, required this.postId});
//
//   @override
//   Widget build(BuildContext context) {
//     final commentController = TextEditingController();
//     final socialProvider = Provider.of<SocialProvider>(context, listen: false);
//
//     return Scaffold(
//       appBar: AppBar(title: const Text('Comments')),
//       body: Column(
//         children: [
//           Expanded(
//             child: StreamBuilder<List<Comment>>(
//               stream: socialProvider.getComments(postId),
//               builder: (context, snapshot) {
//                 if (!snapshot.hasData)
//                   return const Center(child: CircularProgressIndicator());
//                 final comments = snapshot.data!;
//                 return ListView.builder(
//                   padding: const EdgeInsets.all(8.0),
//                   itemCount: comments.length,
//                   itemBuilder: (context, index) {
//                     final comment = comments[index];
//                     return ListTile(
//                       leading: CircleAvatar(
//                         child: Text(comment.username.substring(0, 1)),
//                       ),
//                       title: Text(
//                         comment.username,
//                         style: const TextStyle(fontWeight: FontWeight.bold),
//                       ),
//                       subtitle: Text(comment.text),
//                     );
//                   },
//                 );
//               },
//             ),
//           ),
//           Padding(
//             padding: const EdgeInsets.all(8.0),
//             child: Row(
//               children: [
//                 Expanded(
//                   child: TextField(
//                     controller: commentController,
//                     decoration: const InputDecoration.collapsed(
//                       hintText: 'Add a comment...',
//                     ),
//                   ),
//                 ),
//                 IconButton(
//                   icon: Icon(Icons.send, color: Theme.of(context).primaryColor),
//                   onPressed: () {
//                     if (commentController.text.isNotEmpty) {
//                       socialProvider.addComment(postId, commentController.text);
//                       commentController.clear();
//                     }
//                   },
//                 ),
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }
//
// class ChatListScreen extends StatelessWidget {
//   const ChatListScreen({super.key});
//   @override
//   Widget build(BuildContext context) {
//     return StreamBuilder<List<ChatConversation>>(
//       stream: Provider.of<ChatProvider>(context).getConversationsStream(),
//       builder: (context, snapshot) {
//         if (snapshot.hasError)
//           return Center(child: Text('Error: ${snapshot.error}'));
//         if (!snapshot.hasData)
//           return const Center(child: CircularProgressIndicator());
//         final conversations = snapshot.data!;
//
//         if (conversations.isEmpty) {
//           return const Center(
//             child: Text("No chats yet. Start a conversation!"),
//           );
//         }
//
//         return ListView.separated(
//           itemCount: conversations.length,
//           itemBuilder: (context, index) {
//             final conversation = conversations[index];
//
//             final recipient = UserModel(
//               uid: conversation.otherUserId,
//               fullName: conversation.otherUserName,
//               email: '',
//               role: 'trekker',
//               connections: [],
//               sentRequests: [],
//               receivedRequests: [],
//             );
//             return ListTile(
//               leading: CircleAvatar(
//                 radius: 28,
//                 backgroundImage: NetworkImage(conversation.otherUserAvatarUrl),
//               ),
//               title: Text(
//                 conversation.otherUserName,
//                 style: const TextStyle(fontWeight: FontWeight.bold),
//               ),
//               subtitle: Text(
//                 conversation.lastMessage,
//                 maxLines: 1,
//                 overflow: TextOverflow.ellipsis,
//               ),
//               trailing: Text(
//                 conversation.timestamp
//                     .toDate()
//                     .toLocal()
//                     .toString()
//                     .substring(11, 16),
//                 style: Theme.of(context).textTheme.bodySmall,
//               ),
//               onTap: () => Navigator.push(
//                 context,
//                 MaterialPageRoute(
//                   builder: (context) => ChatScreen(recipient: recipient),
//                 ),
//               ),
//             );
//           },
//           separatorBuilder: (context, index) => const Divider(indent: 80),
//         );
//       },
//     );
//   }
// }
//
// class ChatScreen extends StatelessWidget {
//   final UserModel recipient;
//   const ChatScreen({super.key, required this.recipient});
//   @override
//   Widget build(BuildContext context) {
//     final messageController = TextEditingController();
//     final chatProvider = Provider.of<ChatProvider>(context, listen: false);
//     final currentUser = Provider.of<AuthProvider>(context, listen: false).user;
//
//     if (currentUser == null) {
//       return const Scaffold(
//         body: Center(child: Text("Please log in to chat.")),
//       );
//     }
//     final chatRoomId = chatProvider.getChatRoomId(currentUser.uid, recipient.uid);
//
//     return Scaffold(
//       appBar: AppBar(title: Text(recipient.fullName)),
//       body: Column(
//         children: [
//           Expanded(
//             child: StreamBuilder<List<ChatMessage>>(
//               stream: chatProvider.getMessages(chatRoomId),
//               builder: (context, snapshot) {
//                 if (snapshot.hasError)
//                   return Center(child: Text('Error: ${snapshot.error}'));
//                 if (!snapshot.hasData)
//                   return const Center(child: CircularProgressIndicator());
//                 final messages = snapshot.data!;
//                 return ListView.builder(
//                   reverse: true,
//                   padding: const EdgeInsets.all(16.0),
//                   itemCount: messages.length,
//                   itemBuilder: (context, index) => _buildChatBubble(
//                     context,
//                     messages[index],
//                     currentUser.uid,
//                   ),
//                 );
//               },
//             ),
//           ),
//           Container(
//             padding: const EdgeInsets.all(8.0),
//             decoration: BoxDecoration(
//               color: Theme.of(context).cardColor,
//               boxShadow: [
//                 BoxShadow(
//                   offset: const Offset(0, -1),
//                   blurRadius: 4.0,
//                   color: Colors.black.withOpacity(0.05),
//                 ),
//               ],
//             ),
//             child: Row(
//               children: [
//                 Expanded(
//                   child: TextField(
//                     controller: messageController,
//                     decoration: const InputDecoration.collapsed(
//                       hintText: 'Type a message...',
//                     ),
//                   ),
//                 ),
//                 IconButton(
//                   icon: Icon(Icons.send, color: Theme.of(context).primaryColor),
//                   onPressed: () {
//                     if (messageController.text.isNotEmpty) {
//                       chatProvider.sendMessage(
//                         chatRoomId,
//                         messageController.text,
//                         recipient.uid,
//                         recipient.fullName,
//                         'https://picsum.photos/seed/${recipient.uid}/100/100', // Placeholder avatar
//                       );
//                       messageController.clear();
//                     }
//                   },
//                 ),
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }
//
//   Widget _buildChatBubble(
//       BuildContext context,
//       ChatMessage message,
//       String currentUserId,
//       ) {
//     final isSentByMe = message.senderId == currentUserId;
//     final bubbleAlignment = isSentByMe
//         ? CrossAxisAlignment.end
//         : CrossAxisAlignment.start;
//     final bubbleColor = isSentByMe
//         ? Theme.of(context).primaryColor
//         : Colors.grey.shade200;
//     final textColor = isSentByMe ? Colors.white : Colors.black87;
//     return Container(
//       margin: const EdgeInsets.symmetric(vertical: 4.0),
//       child: Column(
//         crossAxisAlignment: bubbleAlignment,
//         children: [
//           Container(
//             padding: const EdgeInsets.symmetric(
//               horizontal: 16.0,
//               vertical: 10.0,
//             ),
//             decoration: BoxDecoration(
//               color: bubbleColor,
//               borderRadius: BorderRadius.circular(20.0),
//             ),
//             child: Text(message.text, style: TextStyle(color: textColor)),
//           ),
//           const SizedBox(height: 4.0),
//           Text(
//             message.timestamp.toDate().toLocal().toString().substring(11, 16),
//             style: Theme.of(context).textTheme.bodySmall,
//           ),
//         ],
//       ),
//     );
//   }
// }
//
// // --- PROFILE SCREEN ---
// class ProfileScreen extends StatelessWidget {
//   const ProfileScreen({super.key});
//
//   @override
//   Widget build(BuildContext context) {
//     final authProvider = Provider.of<AuthProvider>(context);
//     final user = authProvider.user;
//
//     if (user == null || authProvider.userModel == null) {
//       return const Center(child: CircularProgressIndicator());
//     }
//
//     final userModel = authProvider.userModel!;
//
//     return DefaultTabController(
//       length: 2,
//       child: Scaffold(
//         body: NestedScrollView(
//           headerSliverBuilder: (context, innerBoxIsScrolled) {
//             return [
//               SliverAppBar(
//                 expandedHeight: 240.0,
//                 floating: false,
//                 pinned: true,
//                 backgroundColor: Theme.of(context).primaryColor,
//                 actions: [
//                   IconButton(
//                     icon: const Icon(Icons.people_alt_outlined),
//                     onPressed: () {
//                       Navigator.of(context).push(MaterialPageRoute(builder: (context) => FindUsersScreen()));
//                     },
//                   )
//                 ],
//                 flexibleSpace: FlexibleSpaceBar(
//                   background: Container(
//                     decoration: BoxDecoration(
//                       gradient: LinearGradient(
//                         colors: [Colors.green.shade500, Colors.green.shade300],
//                         begin: Alignment.topLeft,
//                         end: Alignment.bottomRight,
//                       ),
//                     ),
//                     child: Padding(
//                       padding: const EdgeInsets.only(
//                         bottom: 50.0,
//                       ),
//                       child: Column(
//                         mainAxisAlignment: MainAxisAlignment.center,
//                         children: [
//                           CircleAvatar(
//                             radius: 45,
//                             backgroundColor: Colors.white,
//                             child: CircleAvatar(
//                               radius: 42,
//                               backgroundColor: Colors.grey.shade300,
//                               child: Text(
//                                 userModel.fullName
//                                     .substring(0, 1)
//                                     .toUpperCase(),
//                                 style: const TextStyle(
//                                   fontSize: 40,
//                                   color: Colors.white,
//                                 ),
//                               ),
//                             ),
//                           ),
//                           const SizedBox(height: 12),
//                           Text(
//                             userModel.fullName,
//                             style: const TextStyle(
//                               fontSize: 22,
//                               fontWeight: FontWeight.bold,
//                               color: Colors.white,
//                               letterSpacing: 1.1,
//                             ),
//                           ),
//                           const SizedBox(height: 4),
//                           Text(
//                             user.email ?? 'No email provided',
//                             style: const TextStyle(
//                               fontSize: 16,
//                               color: Colors.white70,
//                             ),
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ),
//                 bottom: TabBar(
//                   indicatorColor: Colors.white,
//                   indicatorWeight: 3,
//                   tabs: [
//                     const Tab(icon: Icon(Icons.grid_on), text: "My Posts"),
//                     Tab(
//                         child: Row(
//                           mainAxisAlignment: MainAxisAlignment.center,
//                           children: [
//                             const Icon(Icons.group_add),
//                             const SizedBox(width: 8),
//                             const Text("Requests"),
//                             if(userModel.receivedRequests.isNotEmpty)
//                               Padding(
//                                 padding: const EdgeInsets.only(left: 8.0),
//                                 child: CircleAvatar(
//                                   radius: 10,
//                                   backgroundColor: Colors.red,
//                                   child: Text(
//                                     userModel.receivedRequests.length.toString(),
//                                     style: const TextStyle(color: Colors.white, fontSize: 12),
//                                   ),
//                                 ),
//                               )
//                           ],
//                         )
//                     ),
//                   ],
//                 ),
//               ),
//             ];
//           },
//           body: TabBarView(
//             children: [
//               _buildUserPostsGrid(context, user.uid),
//               _buildConnectionRequests(context, userModel.receivedRequests),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
//
//   Widget _buildConnectionRequests(BuildContext context, List<String> requestIds) {
//     if (requestIds.isEmpty) {
//       return const Center(child: Text("No new connection requests."));
//     }
//
//     return StreamBuilder<List<UserModel>>(
//         stream: Provider.of<UserProvider>(context).getReceivedRequests(requestIds),
//         builder: (context, snapshot) {
//           if (!snapshot.hasData) return const Center(child: CircularProgressIndicator());
//           final requestUsers = snapshot.data!;
//
//           return ListView.builder(
//             itemCount: requestUsers.length,
//             itemBuilder: (context, index) {
//               final sender = requestUsers[index];
//               return ListTile(
//                 leading: CircleAvatar(child: Text(sender.fullName.substring(0,1).toUpperCase())),
//                 title: Text(sender.fullName),
//                 subtitle: Text(sender.email),
//                 trailing: Row(
//                   mainAxisSize: MainAxisSize.min,
//                   children: [
//                     IconButton(
//                       icon: const Icon(Icons.check, color: Colors.green),
//                       onPressed: () {
//                         Provider.of<AuthProvider>(context, listen: false).acceptConnectionRequest(sender.uid);
//                       },
//                     ),
//                     IconButton(
//                       icon: const Icon(Icons.close, color: Colors.red),
//                       onPressed: () {
//                         Provider.of<AuthProvider>(context, listen: false).declineConnectionRequest(sender.uid);
//                       },
//                     ),
//                   ],
//                 ),
//               );
//             },
//           );
//         }
//     );
//   }
//
//
//   Widget _buildUserPostsGrid(BuildContext context, String userId) {
//     return StreamBuilder<List<SocialPost>>(
//       stream: Provider.of<SocialProvider>(context).getUserPostsStream(userId),
//       builder: (context, snapshot) {
//         if (!snapshot.hasData)
//           return const Center(child: CircularProgressIndicator());
//         final posts = snapshot.data!;
//         if (posts.isEmpty)
//           return const Center(child: Text("You haven't posted anything yet."));
//         return GridView.builder(
//           gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
//             crossAxisCount: 3,
//             crossAxisSpacing: 2,
//             mainAxisSpacing: 2,
//           ),
//           itemCount: posts.length,
//           itemBuilder: (context, index) =>
//               Image.network(posts[index].postImageUrl, fit: BoxFit.cover),
//         );
//       },
//     );
//   }
// }
//
// class FindUsersScreen extends StatefulWidget {
//   const FindUsersScreen({super.key});
//
//   @override
//   State<FindUsersScreen> createState() => _FindUsersScreenState();
// }
//
// class _FindUsersScreenState extends State<FindUsersScreen> {
//   String _searchQuery = "";
//
//   @override
//   Widget build(BuildContext context) {
//     final userProvider = Provider.of<UserProvider>(context);
//     final authProvider = Provider.of<AuthProvider>(context);
//     final currentUser = authProvider.userModel;
//
//     return Scaffold(
//       appBar: AppBar(title: const Text("Find Trekkers")),
//       body: Column(
//         children: [
//           Padding(
//             padding: const EdgeInsets.all(16.0),
//             child: TextField(
//               onChanged: (value) => setState(() => _searchQuery = value),
//               decoration: const InputDecoration(
//                 hintText: 'Search by name...',
//                 prefixIcon: Icon(Icons.search),
//                 border: OutlineInputBorder(),
//               ),
//             ),
//           ),
//           Expanded(
//             child: StreamBuilder<List<UserModel>>(
//               stream: userProvider.searchUsers(_searchQuery),
//               builder: (context, snapshot) {
//                 if (_searchQuery.isEmpty) {
//                   return const Center(child: Text('Enter a name to start searching.'));
//                 }
//                 if (!snapshot.hasData) {
//                   return const Center(child: CircularProgressIndicator());
//                 }
//                 final users = snapshot.data!.where((user) => user.uid != currentUser?.uid).toList();
//                 if (users.isEmpty) {
//                   return const Center(child: Text('No users found.'));
//                 }
//                 return ListView.builder(
//                   itemCount: users.length,
//                   itemBuilder: (context, index) {
//                     final user = users[index];
//                     final isConnected = currentUser?.connections.contains(user.uid) ?? false;
//                     final requestSent = currentUser?.sentRequests.contains(user.uid) ?? false;
//
//                     Widget trailingWidget;
//                     if(isConnected) {
//                       trailingWidget = const Chip(label: Text('Connected'), backgroundColor: Colors.green);
//                     } else if (requestSent) {
//                       trailingWidget = const Chip(label: Text('Request Sent'));
//                     } else {
//                       trailingWidget = ElevatedButton(
//                         onPressed: () {
//                           authProvider.sendConnectionRequest(user.uid);
//                         },
//                         child: const Text('Add Friend'),
//                       );
//                     }
//
//                     return ListTile(
//                       leading: CircleAvatar(child: Text(user.fullName.substring(0,1).toUpperCase())),
//                       title: Text(user.fullName),
//                       subtitle: Text(user.email),
//                       trailing: trailingWidget,
//                     );
//                   },
//                 );
//               },
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }
